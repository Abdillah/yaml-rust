{"name":"Yaml-rust","tagline":"A pure rust YAML implementation.","body":"# yaml-rust\r\n\r\nThe missing YAML 1.2 implementation for Rust.\r\n\r\n[![Build Status](https://travis-ci.org/chyh1990/yaml-rust.svg?branch=master)](https://travis-ci.org/chyh1990/yaml-rust)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/scf47535ckp4ylg4?svg=true)](https://ci.appveyor.com/project/chyh1990/yaml-rust)\r\n\r\n`yaml-rust` is a pure Rust YAML 1.2 implementation without\r\nany FFI and crate dependencies, which enjoys the memory safe \r\nproperty and other benefits from the Rust language. \r\nThe parser is heavily influenced by `libyaml` and `yaml-cpp`.\r\n\r\nThis crate works on all Rust supported platforms and\r\nRust 1.0.0 and nightly!\r\n\r\nNOTE: This library is still under heavily development.\r\n\r\n## Quick Start\r\n\r\nAdding the following to the Cargo.toml in your project:\r\n\r\n```\r\n[dependencies.yaml-rust]\r\ngit = \"https://github.com/chyh1990/yaml-rust.git\"\r\n```\r\n\r\nand import using *extern crate*:\r\n\r\n```.rust\r\nextern crate yaml_rust;\r\n```\r\n\r\nUse `yaml::YamlLoader` to load the YAML documents and access it\r\nas Vec/HashMap:\r\n\r\n```.rust\r\nextern crate yaml_rust;\r\nuse yaml_rust::{YamlLoader, YamlEmitter};\r\n\r\nfn main() {\r\n    let s =\r\n\"\r\nfoo:\r\n    - list1\r\n    - list2\r\nbar:\r\n    - 1\r\n    - 2.0\r\n\";\r\n    let docs = YamlLoader::load_from_str(s).unwrap();\r\n\r\n    // Multi document support, doc is a yaml::Yaml\r\n    let doc = &docs[0];\r\n\r\n    // Debug support\r\n    println!(\"{:?}\", doc);\r\n\r\n    // Index access for map & array\r\n    assert_eq!(doc[\"foo\"][0].as_str().unwrap(), \"list1\");\r\n    assert_eq!(doc[\"bar\"][1].as_f64().unwrap(), 2.0);\r\n\r\n    // Chained key/array access is checked and won't panic,\r\n    // return BadValue if they are not exist.\r\n    assert!(doc[\"INVALID_KEY\"][100].is_badvalue());\r\n    \r\n    // Dump the YAML object\r\n    let mut out_str = String::new();\r\n    {\r\n        let mut emitter = YamlEmitter::new(&mut out_str);\r\n        emitter.dump(doc).unwrap(); // dump the YAML object to a String\r\n    }\r\n    println!(\"{}\", out_str);\r\n}\r\n```\r\n\r\nNote that `yaml::Yaml` implements `Index<&'a str>` & `Index<usize>`:\r\n\r\n* `Index<usize>` assumes the container is an Array\r\n* `Index<&'a str>` assumes the container is a string to value Map\r\n* otherwise, `Yaml::BadValue` is returned\r\n\r\nIf your document does not conform to this convention (e.g. map with\r\ncomplex type key), you can use the `Yaml::as_XXX` family API to access your\r\ndocuments.\r\n\r\n## Features\r\n\r\n* Pure Rust\r\n* Ruby-like Array/Hash access API\r\n* Low-level YAML events emission\r\n\r\n## Specification Compliance\r\n\r\nThis implementation aims to provide YAML parser fully compatible with\r\nthe YAML 1.2 specification. The pasrser can correctly parse almost all\r\nexamples in the specification, except for the following known bugs:\r\n\r\n* Empty plain scalar in certain contexts\r\n\r\nHowever, the widely used library `libyaml` also fails to parse these examples,\r\nso it may not be a huge problem for most users. \r\n\r\n## Goals\r\n\r\n* Encoder\r\n* Tag directive\r\n* Alias while desearilization\r\n\r\n## Contribution\r\n\r\nFork & PR on Github.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}